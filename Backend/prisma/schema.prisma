generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SellerRole {
  ORGANISATION
  INDIVIDUAL
}

enum ScrapMaterial {
  ALUMINUM
  STEEL
  COPPER
  PLASTIC
  GLASS
  WOOD
  PAPER
  RUBBER
  TEXTILE
  OTHER
}

enum ItemStatus {
  PENDING
  PICKED
  COMPLETED
}

enum Role {
  SELLER
  DEALER
}

enum listPlatform {
  WEBSITE
  TELEGRAM
}

model User {
  userId          String     @id @default(uuid())
  role            Role       @default(SELLER)
  fullName        String
  phone           String     @unique
  email           String?     @unique
  passwordHash    String
  permAddress     String
  profilePicture  String
  itemsSold       Int?
  itemsPublish    Int?
  sellerRole      SellerRole @default(INDIVIDUAL)
  orgName         String?
  orgAddress      String?
  items           Item[]      // One-to-many relation: A user can have many items
  transactions    Transaction[] // One-to-many relation: A user can have many transactions
  //we can have rating later
}

model Dealer {
  dealerId        String    @id @default(uuid())
  role            Role      @default(DEALER)
  fullName        String
  phone           String    @unique
  email           String    @unique
  passwordHash    String
  permAddress     String
  profilePicture  String
  orgName         String
  orgAddress      String    // Organisation address
  gstNo           String    @unique // GST number
  licNum          String    @unique // License number
  items           Item[]     // One-to-many relation: A dealer can buy many items (one at a time)
  transactions    Transaction[] // One-to-many relation: A dealer can have many transactions (one per item)
  //we can add ratings later
}

model Item {
  itemId              Int       @id @default(autoincrement())
  user_id             String?     //will only be used if the user is logged in , if listed from telegram, then the telegram id is used
  dealer_id           String?      // Updated when the item is sold to the dealer

  telegram_id         String?     //used if the seller lists from the telegram
  seller_name         String
  seller_phone        String
  pictures            String[]     // Array for multiple images
  description         String
  quantity            Float        // Updated to Float for numeric operations
  listPlat            listPlatform // send the data as TELEGRAM
  material            ScrapMaterial 
  pickUpAddress       String
  pickUpTime          String     // Changed to DateTime for better management
  price               Float

  status              ItemStatus   @default(PENDING) // Added status
  createdAt           DateTime     @default(now())
  userAcc             User?         @relation(fields:[user_id], references:[userId])  // User foreign key
  dealer              Dealer?      @relation(fields: [dealer_id], references: [dealerId]) // Optional: Only when sold to a dealer
  transaction         Transaction? // One-to-one relationship with Transaction
}

model Transaction {
  transactionId      String     @id @default(uuid())

  userId             String
  dealerId           String
  itemId             Int     @unique  // Making this unique ensures one-to-one relationship with Item
  amount             Float
  paymentStatus      String     // E.g., 'Paid', 'Pending'
  trackingId         String?    // Optional tracking ID for pickup and delivery

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User       @relation(fields: [userId], references: [userId])     // User foreign key
  dealer             Dealer     @relation(fields: [dealerId], references: [dealerId])   // Dealer foreign key
  item               Item       @relation(fields: [itemId], references: [itemId])       // Item foreign key (One-to-one relation)
}

model ShopItem {
  ItemId             Int        @id @default(autoincrement())
  SellerId           String     @default(uuid())
  images             String[]
  price              Float
  stock              Int
  category           String
}
